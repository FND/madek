#!/usr/bin/env ruby

###############################################################################
# This script gathers ruby coverage information from a cider-ci instance and
# aggregates it via simplecov.
#
# Authors: Thomas Schank <DrTom@schank.ch>, Ramon Cahenzli <ramon.cahenzli@zhdk.ch>
#
###############################################################################


# required gems
#
# gem 'json_roa-client', group: [:test, :development], git: 'https://github.com/json-roa/json-roa_ruby-client.git'
# gem 'thread', group: [:test, :development]
# gem 'simplecov', require: false, group: ['test']


#  Planned features for the future: 
#
# * upload result to cider-ci (attachments to the tree_id)

require 'fileutils'
require 'json_roa/client'
require 'optparse'
require 'ostruct'
require 'simplecov'
require 'thread/future'
require 'thread/pool'
# require 'pry'

###############################################################################
# Download from Cider-CI
###############################################################################

def connect base_url, username, password
  root_resource = JSON_ROA::Client.connect base_url do |conn|
    conn.basic_auth(username,password)
  end
end

def get_execution_resource root, execution_id
  root.relation('execution').get('id' => execution_id )
end 


def download_resultset_attachments execution, thread_pool_size

  print "download_resultset_attachments"; STDOUT.flush

  pool = Thread.pool thread_pool_size

  execution.relation('tasks').get.collection.map do |task_relation|
      Thread.future pool do 
        print "."; STDOUT.flush
        task_relation.get().relation('trials') \
          .get.collection.map do |trial_relation|
          print "."; STDOUT.flush
          trial_relation.get.relation('trial-attachments') \
            .get.collection.map do |tar|
            trial_attachment_resource= tar.get 
            print "."; STDOUT.flush
            if  trial_attachment_resource.data['path'] =~ /resultset\.json/
              print "*"; STDOUT.flush
              trial_attachment_resource.relation('data-stream').get.response.body
            end
          end
        end
      end
    end.map(&:~).flatten.compact
end



###############################################################################
# Simplev cov
###############################################################################


def convert_resultsets resultsets
  puts "\nconvert_resultsets"
  resultsets.map do |resultset|
    SimpleCov::JSON.parse(resultset.to_json).map do |command_name, data|
      [ command_name, data.map do |k,v|
        case k
        when "coverage"
          [ k, v.map do |filename,file_coverage|  
            [filename.gsub(/\/.*\/[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}/, FileUtils.pwd), 
             file_coverage]
          end.instance_eval{Hash[self]} ]
        else 
          [k,v]
        end
      end.instance_eval {Hash[self]} ]
    end.instance_eval{Hash[self]}.instance_eval{SimpleCov::Result.from_hash(self)}
  end
end


def reduce_resultsets resultsets
  puts "reduce_resultsets"
  resultsets.reduce({}) do |agg,resultset|
    resultset.original_result.merge_resultset(agg)
  end
end


def init_simple_cov
  SimpleCov.add_group "Models", "app/models"
  SimpleCov.add_group "Controllers", "app/controllers"
  SimpleCov.add_group "Views", "app/views"
  SimpleCov.add_group "Helpers", "app/helpers"
  SimpleCov.add_group "Factories", "factories"
  SimpleCov.add_group "Libraries", "app/lib"
end


###############################################################################
# Run
###############################################################################

def run_coverage execution, thrad_pool_size
  download_resultset_attachments(execution,thrad_pool_size).instance_eval do
    convert_resultsets self
  end.instance_eval do
    reduce_resultsets self
  end.instance_eval do
    init_simple_cov
    SimpleCov::Result.new self
  end.instance_eval do
    SimpleCov::Formatter::HTMLFormatter.new.format self
  end
end


###############################################################################
# Options, main ....
###############################################################################


def parse_options options


  optparse = OptionParser.new do |opts|
    opts.banner = "Usage: retrieve_cider_coverage.rb -e EXECUTION_ID"

    opts.on('-a', '--api-url API-URL') do |url|
      options.base_url= url
    end

    opts.on('-e', '--execution EXECUTION_ID', 
            'Execution ID to retrieve coverage for') do |exid|
      options.execution_id = exid
    end

    opts.on('-t', '--thread-pool-size N', Integer) do |t|
      options.thread_pool_size = t
    end

    opts.on('-u', '--username NAME', String) do |n|
      options.username = n
    end

    opts.on('-p', '--password PASSWORD', String) do |p|
      options.password= p
    end

  end.parse!

  options
end


def assert_correct_tree_id execution
  if execution.data['tree_id'] != `git log -n 1 --pretty=%T`.strip
    raise ScriptError, "you must be on the same tree_id as the execution" 
  end
end


def main
  options = OpenStruct.new
  options.thread_pool_size= 50
  options.execution_id= nil
  options.username= ENV['CIDER_CI_USERNAME']
  options.password= ENV['CIDER_CI_PASSWORD']
  options.base_url= 'http://ci2.zhdk.ch/cider-ci/api/v2/'
  parse_options options
  options.execution_id || raise(OptionParser::MissingArgument \
                                , "execution_id is required")
  options.username || raise(OptionParser::MissingArgument \
                            , "username is required, set CIDER_CI_USERNAME")
  options.password || raise(OptionParser::MissingArgument \
                            , "password is required, set CIDER_CI_USERNAME")


  root = connect options.base_url, options.username, options.password
  execution= get_execution_resource root, options.execution_id
  assert_correct_tree_id execution
  FileUtils.rm_rf('coverage')
  run_coverage execution, options.thread_pool_size
end


main 
