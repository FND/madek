.meta-keys
  = form_for [:app_admin, @meta_key], html: {class: "form-horizontal", role: "form"} do |f|

    = hidden_field_tag :meta_terms_positions
    = f.hidden_field :meta_terms_alphabetical_order

    .form-group
      %label.control-label.col-sm-2 Label
      .col-sm-4
        = f.text_field :id, class: 'form-control'

    - unless @meta_key.persisted?
      .form-group
        %label.control-label.col-sm-2 Meta datum object type
        .col-sm-4
          = f.select :meta_datum_object_type, MetaKey.object_types, {include_blank: false}, {class: "form-control"}

    - if @meta_key.meta_datum_object_type == 'MetaDatumMetaTerms'
      .form-group
        %label.control-label.col-sm-2 Terms
        .col-sm-6
          = link_to apply_alphabetical_order_app_admin_meta_key_path(@meta_key), class: "btn btn-primary", id: "alphabetical-order", method: :post, remote: true do
            %i.fa.fa-sort-alpha-asc
            Apply Alphabetical Order
          %ul#sortable.list-unstyled
            = f.fields_for :meta_terms do |ff|
              - if ff.object.new_record?
                %li.new-term
                  %h2 Add Meta Term
                  = ff.label :term, "Term"
                  = ff.text_field :term
              - else
                %li{id: "#{ff.object.id}", data: { term: ff.object.term }}
                  = label_tag :id, "ID"
                  = text_field_tag :id, ff.object.id, disabled: true
                  %br
                  = ff.label :term, "Term"
                  = ff.text_field :term
                  %br
                  - if f.object.used_term_ids.include?(ff.object.id)
                    = label_tag "reassign_term_id[#{ff.object.id}]", "Used, merge to:"
                    = text_field_tag "reassign_term_id[#{ff.object.id}]", nil, size: 31
                    %br
                  - if ff.object.persisted? && 
                    = ff.check_box :_destroy
                    = ff.label :_destroy, 'Delete'

      .form-group
        .col-sm-offset-2.col-sm-4
          .checkbox
            %label
              = f.check_box :is_extensible_list
              Extensible list?

    .form-group
      .col-sm-offset-2.col-sm-4
        = button_tag "Submit", type: 'submit', class: "btn btn-success"
        - if @meta_key.persisted?
          = link_to "Cancel", edit_app_admin_meta_key_path(@meta_key), class: "btn btn-danger"

:javascript
  $(document).ready(function(){
    function getPositions() {
      var positions = [];
      $('#sortable li').each(function() {
        if(this.id) {
          positions.push(this.id);
        }
      });
      $('#meta_terms_positions').val( positions.join(',') );
    }

    $("#sortable").sortable({
      axis: 'y',
      items: '> li:not(.new-term)',
      cursor: 'move',
      placeholder: 'placeholder',
      forcePlaceholderSize: true,
      update: function(event, ui) {
        getPositions();
        $('#meta_key_meta_terms_alphabetical_order').val(0);
      }
    });

    $(document).ajaxSuccess(function(event, xhr, settings) {
      if($('#alphabetical-order').attr('href') === settings.url) {
        var data = $.parseJSON(xhr.responseText);
        console.log('data:', data);
        $.each(data, function(index, id) {
          $('#' + id).attr('data-position', index);
        });

        function compare(a, b) {
          var aValue = $(a).data('position');
          var bValue = $(b).data('position');
          if(aValue < bValue) {
            return -1;
          }
          if(aValue > bValue) {
            return 1;
          }
          return 0;
        }

        $('#sortable li[data-position]').detach().sort(compare).prependTo('#sortable');
        $('#meta_key_meta_terms_alphabetical_order').val(1);
        getPositions();
      }
    });
  });
