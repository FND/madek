:ruby
  # This is an presenter-specific application partial
  return unless poly_resources
  res = poly_resources

  # for each type of resource, build the list of polythumbs
  resource_types = {
    media_entries: res[:media_entries].map do |get|
      deco('polythumb',
        title: get.title,
        thumb: component('thumbnail',
          mods: ['media-entry'], # TODO : type of entry ('video')
          text: get.title,
          picture: get.image_url('small'),
          # yes this is *inside* the thumbâ€¦ workaround hacky CSS :/
          meta: {
            title: 'TODO',
            subtitle: 'TODO'
          }
        )
      )
    end,
    collections: res[:collections].map do |get|
      deco('polythumb',
        title: get.title,
        thumb: component('thumbnail',
          mods: ['media-set'],
          text: get.title,
          picture: get.image_url('small'),
          meta: {
            title: get.title,
            subtitle: 'TODO'
          }
        )
      )
    end,
    filter_sets: res[:filter_sets].map do |get|
      deco('polythumb',
        title: get.title,
        thumb: component('thumbnail',
          mods: ['filter-set'], # TODO : type of entry ('video')
          text: get.title,
          picture: get.image_url('small'),
          meta: {
            title: get.title,
            subtitle: 'TODO'
          }
        )
      )
    end
  }


-# a list for each kind of resource.
  - skips empty lists
  - rendered as consective units
  - re-uses pagination elements
  - TODO: ujs: use filterbar ui + tab logic

%ul.POLYBOX.ui-resources{class: classes}

  -# a unit for each type of resource
  - resource_types.each do |type, resources_list|
    - unless resources_list.empty?
      %li.ui-resources-page

        -# a small heading TODO: txt()
        %span.ui-resources-page-counter.ui-pager.small
          = type

        -# the actual box of items
        %ul.ui-resources-page-items
          - resources_list.each do |item|
            = item
